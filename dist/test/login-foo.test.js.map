{"version":3,"file":"login-foo.test.js","sourceRoot":"","sources":["../../test/login-foo.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit';\nimport { fixture, expect } from '@open-wc/testing';\nimport { LoginFoo } from '../src/LoginFoo.js';\nimport '../src/login-foo.js';\n\ndescribe('LoginFoo', () => {\n    let element:any;\n  \n    beforeEach(async () => {\n      element = await fixture(html`<login-foo></login-foo>`);\n    });\n  \n    it('should render the login form initially', () => {\n      const form = element.shadowRoot.querySelector('form');\n      expect(form).to.exist;\n  \n      const usernameInput = form.querySelector('#username');\n      const emailInput = form.querySelector('#email');\n      expect(usernameInput).to.exist;\n      expect(emailInput).to.exist;\n  \n      const button = form.querySelector('button');\n      expect(button.textContent).to.equal('Login');\n    });\n  \n    it('should log in the user and show user details on form submit', async () => {\n      const form = element.shadowRoot.querySelector('form');\n      const usernameInput = form.querySelector('#username');\n      const emailInput = form.querySelector('#email');\n      const passwordInput = form.querySelector('#password');\n      const loginButton = element.shadowRoot.querySelector('.login-btn');\n  \n      usernameInput.value = 'JohnDoe';\n      emailInput.value = 'john.doe@example.com';\n      passwordInput.value = 'admin123';\n  \n      loginButton.click();\n      form.dispatchEvent(new Event('submit'));\n  \n      await element.updateComplete;\n  \n      const userDetails = element.shadowRoot.querySelector('.user-details');\n      expect(userDetails).to.exist;\n      expect(userDetails.querySelector('p').textContent).to.include('JohnDoe');\n      expect(userDetails.querySelector('p + p').textContent).to.include('john.doe@example.com');\n    });\n  \n    it('should log out the user and show the login form again', async () => {\n      // Simulate logging in first\n      element.user = { name: 'John Doe', email: 'john.doe@example.com' };\n      element.loggedIn = true;\n      await element.updateComplete;\n  \n      const logoutButton = element.shadowRoot.querySelector('.logout-btn');\n      expect(logoutButton).to.exist;\n      logoutButton.click();\n  \n      await element.updateComplete;\n  \n      const form = element.shadowRoot.querySelector('form');\n      expect(form).to.exist;\n    });\n  });"]}